#upstream coronakarma-api1 {
# server api1:1881;
#}
#upstream coronakarma-api2 {
# server api2:1882;
#}

  server {
   listen 80;
   server_name karmakurier.org;
   # ALWAYS Redirect to HTTPS
   return 301 https://$server_name$request_uri;
  }
  server {
   listen 443 ssl;
   server_name karmakurier.org;
   keepalive_timeout 70;
   
   # max upload size
   client_max_body_size 75M;   # adjust to taste
   root          /usr/share/nginx/html;
   error_page    400 401 403 404 500 501 502 503 /nginx-http-error.html;
   
   # Set some cache rules
   #location ~* \.(?:manifest|appcache|html?|xml|json)$ {
   # expires -1;
   #}

   ##### SSL/TLS/HTTPS settings
   #ssl_certificate /etc/nginx/ssl/webrem.crt;
   #ssl_certificate_key /etc/nginx/ssl/webrem.key;
   # ssl_protocols TLSv1.2 TLSv1.3; # Requires nginx >= 1.13.0 else use TLSv1.2
   #ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
   #ssl_prefer_server_ciphers on;
   #ssl_session_cache shared:SSL:10m;

   # Set some cache rules
   #location ~* \.(?:css|js)$ {
   # try_files $uri =404;
   # expires 1y;
   # access_log off;
   # add_header Cache-Control "public";
   #}

   # Any route containing a file extension --> HTTP Error 404
   #location ~ ^.+\..+$ {
   # try_files $uri =404;
   #}

   # Any route that doesn't have a file extension --> handle via index.html
   location / {
    try_files $uri $uri/ /index.html;
    proxy_set_header Authorization "valid-token";
    proxy_pass_header Authorization;
   }

   # Send requests for domain.tld/api to the Webrem NodeJS API
#   location /api1 {
    #For debug purposes proxy_set_header Authorization "valid-token";
#    proxy_pass_header Authorization;
#    proxy_pass http://coronakarma-api1;
#   }

   # Send requests for domain.tld/ums to the Webrem NodeJS UMS
#   location /api2 {
#    proxy_pass_header Authorization;
#    proxy_pass http://coronakarma-api2;
#   }
  }