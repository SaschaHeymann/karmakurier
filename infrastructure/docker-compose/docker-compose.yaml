version: '3'
 
services:

#  web:
#    build:
#      context: ../../frontend
#      dockerfile: Dockerfile
#    image: coronakarma-webapp:1.0
#    container_name: coronakarma-webapp
#    restart: always
#    depends_on:
#      - api
#    ports:
#      - "80:80"
#      - "443:443"
#    networks:
#      - coronakarma-network

#  api:
#    build:
#      context: ../../backend
#      dockerfile: Dockerfile
#    image: coronakarma-api:1.0
#    container_name: coronakarma-api
#    restart: always
#    environment:
#      POSTGRES_ROOT_PASSWORD:
#      TZ: Europe/Berlin
#      WAIT_HOSTS: db:5432
#    volumes:
#      - /some/path/nodered-data:/data
#    depends_on:
#      - db
#    ports:
#      - "1881:1881"
#      - "1882:1882"
#      - "8082:8082"
#      - "8083:8083"
#    networks:
#      - coronakarma-network
    #command: ./wait-for.sh db:5432 -- npm start
 
  db:
    build:
      context: ../../database
      dockerfile: Dockerfile
    image: coronakarma-db:1.0
    container_name: coronakarma-postgres
    restart: always
    ports:
      - "5432"
    environment:
      - POSTGRES_USER=
      - POSTGRES_PASSWORD=
      -
    volumes:
      - /var/postgres:/var/lib/postgresql/data
    networks:
      - coronakarma-network

  postgrest:
    build:
      context: ../../database/postgrest
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - db
    environment:
      - PGRST_DB_URI=
      - PGRST_DB_SCHEMA=
      - PGRST_DB_ANON_ROLE=

  adminer:
    image: adminer:4.7
    restart: always
    ports:
      - 8080:8080
    depends_on:
      - db
    networks:
      - coronakarma-network

networks:
  coronakarma-network:
    driver: bridge
volumes:
  db-data:
volumes:
  nodered-data: